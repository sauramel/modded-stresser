import pkgutil
import inspect
from pathlib import Path
from typing import List, Type
from .base import Exploit

# Global registry for discovered exploit classes
_exploit_registry = {}

def get_all_exploits() -> List[Type[Exploit]]:
    """Returns a list of all discovered exploit classes."""
    return list(_exploit_registry.values())

def get_exploit_by_id(exploit_id: str) -> Type[Exploit] | None:
    """Retrieves a single exploit class by its ID."""
    return _exploit_registry.get(exploit_id)

def _discover_and_register_exploits():
    """
    Dynamically discovers and imports all exploit modules in this directory
    and registers the Exploit classes they contain.
    """
    exploit_path = Path(__file__).parent
    
    for _, name, _ in pkgutil.iter_modules([str(exploit_path)]):
        # Import the module
        module = __import__(f"{__name__}.{name}", fromlist=["*"])
        
        # Find all classes in the module that are subclasses of Exploit
        for item_name, item in inspect.getmembers(module, inspect.isclass):
            if issubclass(item, Exploit) and item is not Exploit:
                # Register the class using its 'id' attribute
                if hasattr(item, 'id') and item.id:
                    _exploit_registry[item.id] = item
                else:
                    print(f"Warning: Exploit class {item_name} in {name}.py is missing an 'id' attribute.")

# Run discovery on package import
_discover_and_register_exploits()
