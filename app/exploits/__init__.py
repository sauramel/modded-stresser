import pkgutil
import importlib
from .base import Exploit
from typing import List, Optional, Type, Dict, Any

# A registry of all discovered exploit classes, keyed by their ID
_exploit_classes: Dict[str, Type[Exploit]] = {}

def _discover_exploits():
    """
    Dynamically discovers and imports all Exploit subclasses from this package.
    This function is designed to be run once.
    """
    if _exploit_classes:
        return

    package_path = __path__
    package_name = __name__

    for _, name, _ in pkgutil.iter_modules(package_path):
        if name == 'base':
            continue
        
        try:
            module = importlib.import_module(f".{name}", package_name)
            for item_name in dir(module):
                item = getattr(module, item_name)
                if isinstance(item, type) and issubclass(item, Exploit) and item is not Exploit:
                    if item.id != "base" and item.id not in _exploit_classes:
                        _exploit_classes[item.id] = item
        except Exception as e:
            print(f"Could not import exploits from {name}: {e}")

# Discover exploits on module load
_discover_exploits()

def get_all_exploits() -> List[Type[Exploit]]:
    """Returns a list of all discovered exploit classes, sorted by category and name."""
    return sorted(_exploit_classes.values(), key=lambda x: (x.category, x.name))

def get_exploit_by_id(exploit_id: str) -> Optional[Type[Exploit]]:
    """Returns a single exploit class by its unique ID."""
    return _exploit_classes.get(exploit_id)
