import pkgutil
import importlib
from pathlib import Path
from typing import List, Type

from .base import Exploit

# --- Exploit Loader ---

_exploits: List[Type[Exploit]] = []

def get_all_exploits() -> List[Type[Exploit]]:
    """Returns a list of all loaded exploit classes."""
    return _exploits

def get_exploit_by_id(exploit_id: str) -> Type[Exploit] | None:
    """Finds and returns an exploit class by its ID."""
    for exploit in _exploits:
        if exploit.id == exploit_id:
            return exploit
    return None

def _load_exploits():
    """
    Dynamically discovers and imports all exploit modules from this directory.
    This function runs once on startup.
    """
    global _exploits
    if _exploits: # Ensure this runs only once
        return

    exploit_path = Path(__file__).parent
    
    for _, name, _ in pkgutil.iter_modules([str(exploit_path)]):
        if name == "base":
            continue # Don't load the base class itself
        
        try:
            module = importlib.import_module(f".{name}", package=__package__)
            for item_name in dir(module):
                item = getattr(module, item_name)
                if isinstance(item, type) and issubclass(item, Exploit) and item is not Exploit:
                    _exploits.append(item)
        except Exception as e:
            print(f"Failed to load exploit module '{name}': {e}")

# --- Initial Load ---
_load_exploits()
