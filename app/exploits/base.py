import time
from abc import ABC, abstractmethod
from typing import Dict, Any, Callable

class Exploit(ABC):
    """
    Abstract Base Class for all exploit modules.
    
    Each exploit must define its properties and implement the `run` method,
    which contains the core logic for a single worker thread.
    """
    
    # --- Exploit Metadata ---
    id: str = "base_exploit"
    name: str = "Base Exploit"
    description: str = "This is a template and should not be used directly."
    category: str = "Uncategorized"
    
    # --- Target Requirements ---
    protocol_version_range: tuple = (0, 9999)
    requires_forge: bool = False
    
    def __init__(self, host: str, port: int, stop_time: float, stats, log_callback: Callable, exploit_args: Dict[str, Any]):
        self.host = host
        self.port = port
        self.stop_time = stop_time
        self.stats = stats
        self.log = log_callback
        self.exploit_args = exploit_args

    @abstractmethod
    def run(self):
        """
        The main loop for a single worker thread. This method must be implemented
        by all subclasses. It should contain the core logic of the exploit.
        
        It should periodically check `time.time() < self.stop_time` and exit
        when the condition is false.
        
        It should use `self.stats.increment('key')` to report statistics.
        """
        while time.time() < self.stop_time:
            print("Base exploit running, this should be overridden.")
            time.sleep(1)
            self.stats.increment('packets_sent')

    def log_error(self, message: str):
        """Helper to log errors from the exploit."""
        if self.log:
            self.log({"level": "ERROR", "message": f"[{self.name}] {message}"})
