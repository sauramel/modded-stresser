from typing import List, Dict, Any, Callable

class Exploit:
    """
    Base class for all exploit modules.
    """
    # --- Metadata ---
    id: str = "base"
    name: str = "Base Exploit"
    description: str = "This is a template for creating new exploits."
    category: str = "Misc"
    
    # --- Requirements ---
    requires_forge: bool = False

    # --- Arguments ---
    # Defines the arguments this exploit takes, which will be rendered in the UI.
    # Example:
    # args: List[Dict[str, Any]] = [
    #     {"name": "username", "type": "string", "label": "Username", "default": "Bot"},
    #     {"name": "message", "type": "string", "label": "Spam Message", "default": "Hello!"},
    # ]
    args: List[Dict[str, Any]] = []

    def __init__(self, target_host: str, target_port: int, duration: int, **kwargs):
        """
        Initializes the exploit instance.
        
        :param target_host: The target server's IP or hostname.
        :param target_port: The target server's port.
        :param duration: The duration of the attack in seconds.
        :param kwargs: A dictionary of exploit-specific arguments from the UI.
        """
        self.target_host = target_host
        self.target_port = target_port
        self.duration = duration
        self.exploit_args = kwargs

    def run(self, log_callback: Callable):
        """
        The main logic of the exploit. This method is executed by each thread.
        
        :param log_callback: A function to send log data back to the controller.
                             Example: log_callback({"level": "INFO", "message": "..."})
        """
        raise NotImplementedError("The 'run' method must be implemented by the subclass.")
